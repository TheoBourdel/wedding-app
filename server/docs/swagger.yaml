definitions:
  dto.SignInDto:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Category:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.Estimate:
    properties:
      client:
        $ref: '#/definitions/model.User'
      clientID:
        type: integer
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      price:
        type: number
      provider:
        $ref: '#/definitions/model.User'
      providerID:
        type: integer
      service:
        $ref: '#/definitions/model.Service'
      serviceID:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
    type: object
  model.Favorite:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      service:
        $ref: '#/definitions/model.Service'
      serviceID:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: integer
    type: object
  model.Image:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      path:
        type: string
      service:
        $ref: '#/definitions/model.Service'
      serviceID:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      room:
        $ref: '#/definitions/model.Room'
      roomID:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: integer
    type: object
  model.Role:
    enum:
    - admin
    - provider
    - marry
    type: string
    x-enum-varnames:
    - Admin
    - Provider
    - Marry
  model.Room:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      messages:
        items:
          $ref: '#/definitions/model.Message'
        type: array
      roomName:
        type: string
      updatedAt:
        type: string
    type: object
  model.Service:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      categoryID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      estimates:
        items:
          $ref: '#/definitions/model.Estimate'
        type: array
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      localisation:
        type: string
      mail:
        type: string
      name:
        type: string
      phone:
        type: string
      price:
        type: number
      profileImage:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: integer
    type: object
  model.User:
    properties:
      Email:
        type: string
      Firstname:
        type: string
      androidToken:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      estimates:
        items:
          $ref: '#/definitions/model.Estimate'
        type: array
      id:
        type: integer
      lastname:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/model.Role'
      updatedAt:
        type: string
      weddings:
        items:
          $ref: '#/definitions/model.Wedding'
        type: array
    type: object
  model.Wedding:
    properties:
      address:
        type: string
      budget:
        type: number
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      phone:
        type: string
      updatedAt:
        type: string
      user:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
info:
  contact: {}
  description: API pour le challenge de l'ESGI
  title: Challenge APIIIII
  version: "1.0"
paths:
  /categorys:
    get:
      consumes:
      - application/json
      description: Get a list of all categorys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
      security:
      - Bearer: []
      summary: Get all categorys
      tags:
      - categorys
    post:
      responses: {}
  /categorys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid category ID
          schema:
            type: string
        "404":
          description: Category not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a category by ID
      tags:
      - categorys
    get:
      consumes:
      - application/json
      description: Get a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Category'
        "404":
          description: Category not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get a category by ID
      tags:
      - categorys
    put:
      consumes:
      - application/json
      description: Update a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid category ID or request body
          schema:
            type: string
        "404":
          description: Category not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a category by ID
      tags:
      - categorys
  /images:
    get:
      consumes:
      - application/json
      description: Get a list of all images
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Image'
            type: array
      security:
      - Bearer: []
      summary: Get all images
      tags:
      - images
    post:
      responses: {}
  /images/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a image by its ID
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid image ID
          schema:
            type: string
        "404":
          description: Image not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a image by ID
      tags:
      - images
    get:
      consumes:
      - application/json
      description: Get a image by its ID
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Image'
        "404":
          description: Image not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get a image by ID
      tags:
      - images
    put:
      consumes:
      - application/json
      description: Update a image by its ID
      parameters:
      - description: Image ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated image object
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/model.Image'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid image ID or request body
          schema:
            type: string
        "404":
          description: Image not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a image by ID
      tags:
      - images
  /images/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file and saves it to the server
      parameters:
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Upload an image file
      tags:
      - images
  /room/{room_id}/messages:
    get:
      consumes:
      - application/json
      description: Get a list of messages for a specified room
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Message'
            type: array
      security:
      - Bearer: []
      summary: Get messages by room ID
      tags:
      - messages
  /services:
    get:
      consumes:
      - application/json
      description: Get a list of all services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Service'
            type: array
      security:
      - Bearer: []
      summary: Get all services
      tags:
      - services
    post:
      responses: {}
  /services/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid service ID
          schema:
            type: string
        "404":
          description: Service not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a service by ID
      tags:
      - services
    get:
      consumes:
      - application/json
      description: Get a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Service'
        "404":
          description: Service not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get a service by ID
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Update a service by its ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated service object
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/model.Service'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid service ID or request body
          schema:
            type: string
        "404":
          description: Service not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a service by ID
      tags:
      - services
  /services/{id}/images:
    get:
      consumes:
      - application/json
      description: Get all images associated with a specific service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Image'
            type: array
        "404":
          description: Service not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get images for a service
      tags:
      - services
  /services/search:
    get:
      consumes:
      - application/json
      description: Search for services that match a specific name
      parameters:
      - description: Service Name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Service'
            type: array
        "400":
          description: Service name is required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Search services by name
      tags:
      - services
  /signin:
    post:
      consumes:
      - application/json
      description: Sign in a user
      parameters:
      - description: signin info
        in: body
        name: signinDto
        required: true
        schema:
          $ref: '#/definitions/dto.SignInDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Invalid password
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Sign in
      tags:
      - auth
  /signout:
    delete:
      consumes:
      - application/json
      description: Sign out a user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Sign out
      tags:
      - auth
  /signup:
    post:
      consumes:
      - application/json
      description: Sign up a new user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Sign up
      tags:
      - auth
  /user/{id}/favorites:
    get:
      consumes:
      - application/json
      description: Get all favorites associated with a specific user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Favorite'
            type: array
        "404":
          description: No favorites found for this user
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get favorites by user ID
      tags:
      - favorites
  /user/{id}/services:
    get:
      consumes:
      - application/json
      description: Get all services associated with a specific user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Service'
            type: array
        "404":
          description: No services found for this user
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get services by user ID
      tags:
      - services
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /wedding:
    post:
      consumes:
      - application/json
      description: Create a new wedding
      parameters:
      - description: Wedding object to be created
        in: body
        name: wedding
        required: true
        schema:
          $ref: '#/definitions/model.Wedding'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Wedding'
        "400":
          description: Invalid request
          schema:
            type: string
      security:
      - Bearer: []
      summary: Create a new wedding
      tags:
      - weddings
  /weddings:
    get:
      consumes:
      - application/json
      description: Get a list of all weddings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Wedding'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all weddings
      tags:
      - weddings
  /weddings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a wedding by its ID
      parameters:
      - description: Wedding ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid wedding ID
          schema:
            type: string
        "404":
          description: Wedding not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a wedding by ID
      tags:
      - weddings
    get:
      consumes:
      - application/json
      description: Get a wedding by its ID
      parameters:
      - description: Wedding ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Wedding'
        "404":
          description: Wedding not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get a wedding by ID
      tags:
      - weddings
    put:
      consumes:
      - application/json
      description: Update a wedding by its ID
      parameters:
      - description: Wedding ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated wedding object
        in: body
        name: wedding
        required: true
        schema:
          $ref: '#/definitions/model.Wedding'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid wedding ID or request body
          schema:
            type: string
        "404":
          description: Wedding not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Update a wedding by ID
      tags:
      - weddings
  /weddings/{id}/organizer:
    post:
      consumes:
      - application/json
      description: Add a wedding organizer
      parameters:
      - description: Wedding ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object to be added as an organizer
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Invalid request
          schema:
            type: string
      security:
      - Bearer: []
      summary: Add a wedding organizer
      tags:
      - weddings
  /weddings/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get a wedding by its User ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Wedding'
        "404":
          description: Wedding not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get a wedding by User ID
      tags:
      - weddings
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
